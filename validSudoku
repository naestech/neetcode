# the function isValidSudoku checks if a given 9x9 sudoku board is valid based on sudoku rules.

# create a class called solution which will act as a container for the method.
# define the function isValidSudoku inside the class.
# board: a 9x9 grid representing the sudoku board, -> bool: returns True if the board is valid according to sudoku rules, otherwise False.
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # initialize three lists to track the used numbers in rows, columns, and 3x3 subgrids
        rows = [0] * 9
        cols = [0] * 9
        squares = [0] * 9

        # iterate through each cell in the 9x9 board
        for r in range(9):
            for c in range(9):
                # skip empty cells represented by "."
                if board[r][c] == ".":
                    continue
                
                # convert the board value to an integer (1-9) and adjust for 0-indexing
                val = int(board[r][c]) - 1
                
                # check if the number has already been seen in the current row (using bitwise operations)
                if (1 << val) & rows[r]:
                    return False
                # check if the number has already been seen in the current column
                if (1 << val) & cols[c]:
                    return False
                # check if the number has already been seen in the current 3x3 subgrid
                if (1 << val) & squares[(r // 3) * 3 + (c // 3)]:
                    return False
                
                # mark the number as seen in the current row, column, and 3x3 subgrid using bitwise OR
                rows[r] |= (1 << val)
                cols[c] |= (1 << val)
                squares[(r // 3) * 3 + (c // 3)] |= (1 << val)

        # if no conflicts are found, the board is valid
        return True
